1. EXERCISE 1: Add UTs = find bugs


In this exercise You will implement UTs for existing code. Most of examples have some bugs in them, some are more obvious than others, what can I say, I was writing them in a hurry! 
The examples are not written with the best approach c++-wise, I tried to make them as simple as possible. Do not treat the example code as an example of a good code, did I mention there are bugs?

1. stringLib
  * Files: 
    - include/stringLib.hpp 
    - src/stringLib.cpp
  * Tests:
    - uts/stringLibTest.cpp
  * The purpose of "stringLib" is rather peculiar. "spacesToUnderscoresRemoveNumbers" method takes a string and returns the string without numbers and with spaces changed into ‘_’. Method "sameString" checks if two strings are the same. Method "errorString" combines predefined "Error Code:" string with a number and returns it as a C-style string (const char*). All methods are static and creation of the class is disabled.
  * In this example you should get accustomed with testing strings and C-style strings (there are different googletest macros for the latter!).

2. quadraticEquation
  * Files:
    - include/quadraticEquation.hpp
    - src/quadraticEquation.cpp
  * Test:
    - uts/quadraticEquationTest.cpp
  * The purpose of this function is to find solution for quadratic equation and return it in the format <number_of_solutions, <first_solution, second_solution>>. 
  * In this example you can use floating point macros for googletest and have some fun with unsigned types and std::pair. There is no bug in this function (that I know of…)

3. findInVector
  * Files:
    - include/findInVector.hpp
  * Test:
    - uts/findInVectorTest.cpp
  * The purpose of this function is to return the position of an element in the vector if found, otherwise NULL.
  * The purpose of this exercise is… to write a test that will find the problem. I can even be single test.

4. fileManipulator
  * Files:
    - include/fileManipulator.hpp
    - src/fileManipulator.cpp
  * Test:
    - uts/fileManipulatorTest.cpp
    - uts/fileManipulatorTestFile.txt
  * The purpose of this class is to be able to load a file into a vector of words (strings without space in them), save it to another file, reverse the order of the words in the vector. If saved without changing the order, input and output files should look the same.
  * The purpose of this example is to use an instance of a class in test, use additional .txt file for testing. In this example you can also test if the class will throw an exception (but where would it throw it?). Think how would you test the class if there were no count and getWord methods.

5. stableSort
  * Files:
    - include/stableSort.hpp
  * Test:
    - uts/stableSortTest.cpp
  * The purpose of this function is to sort a vector of objects (ints for example), that is, when given [2,5,1,8,9] the output should be [1,2,5,8,9]. Now we have the "sort" part clear. Stable sort means that given [1,2,3,1,2] the produced output will be [1,1,2,2,3] but the earlier 1 in the input will also be the earlier 1 in the output. Lest assume that 1, 1' and 1'' is the same number then [1,2,3,1',2',1''] is guaranteed to be in this order: [1,1',1'',2,2',3]. In other words, in stable sort algorithms, repeated elements remain in the same order that they appear in the input.
  * The purpose of this exercise is for you to figure out how to test this function.


Note to all examples: 
    All of the code in the examples is in a "utils" namespace, so be sure to refer to those using the scope resolution operator (::) like utils::FileManipulator(). 
